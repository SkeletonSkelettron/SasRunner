
// This file has been generated by the GUI designer. Do not modify.

public partial class MainWindow
{
	private global::Gtk.UIManager UIManager;

	private global::Gtk.VBox vbox1;

	private global::Gtk.Notebook notebook1;

	private global::Gtk.FileChooserWidget filechooserwidget1;

	private global::Gtk.Label label1;

	private global::Gtk.ScrolledWindow GtkScrolledWindow4;

	private global::Gtk.TextView spectra_textview;

	private global::Gtk.Label label4;

	private global::Gtk.ScrolledWindow GtkScrolledWindow5;

	private global::Gtk.TextView spmos1textview;

	private global::Gtk.Label label5;

	private global::Gtk.ScrolledWindow GtkScrolledWindow2;

	private global::Gtk.TextView spmos2textview;

	private global::Gtk.Label label6;

	private global::Gtk.ScrolledWindow GtkScrolledWindow3;

	private global::Gtk.TextView combined_script_textview;

	private global::Gtk.Label label2;

	private global::Gtk.HBox hbox1;

	private global::Gtk.CheckButton epic_check;

	private global::Gtk.Entry epic_name;

	private global::Gtk.CheckButton mos1check;

	private global::Gtk.Entry mos1_name;

	private global::Gtk.CheckButton mos2check;

	private global::Gtk.Entry mos2_name;

	private global::Gtk.HBox hbox2;

	private global::Gtk.CheckButton combine_spectracheck;

	private global::Gtk.Entry combined_spectra_name;

	private global::Gtk.CheckButton deleteExtFiles;

	private global::Gtk.HBox hbox3;

	private global::Gtk.Label label3;

	private global::Gtk.Entry rmfgenEnergyMin;

	private global::Gtk.Label label9;

	private global::Gtk.Entry rmfgenEnergyMax;

	private global::Gtk.Label label8;

	private global::Gtk.Entry rmfgennenergybins;

	private global::Gtk.Button button2;

	protected virtual void Build()
	{
		global::Stetic.Gui.Initialize(this);
		// Widget MainWindow
		this.UIManager = new global::Gtk.UIManager();
		global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup("Default");
		this.UIManager.InsertActionGroup(w1, 0);
		this.AddAccelGroup(this.UIManager.AccelGroup);
		this.Name = "MainWindow";
		this.Title = global::Mono.Unix.Catalog.GetString("SasRunner v0.11");
		this.WindowPosition = ((global::Gtk.WindowPosition)(4));
		this.DefaultWidth = 800;
		this.DefaultHeight = 600;
		// Container child MainWindow.Gtk.Container+ContainerChild
		this.vbox1 = new global::Gtk.VBox();
		this.vbox1.Name = "vbox1";
		this.vbox1.Spacing = 6;
		// Container child vbox1.Gtk.Box+BoxChild
		this.notebook1 = new global::Gtk.Notebook();
		this.notebook1.CanFocus = true;
		this.notebook1.Name = "notebook1";
		this.notebook1.CurrentPage = 4;
		// Container child notebook1.Gtk.Notebook+NotebookChild
		this.filechooserwidget1 = new global::Gtk.FileChooserWidget(((global::Gtk.FileChooserAction)(2)));
		this.filechooserwidget1.Name = "filechooserwidget1";
		this.notebook1.Add(this.filechooserwidget1);
		// Notebook tab
		this.label1 = new global::Gtk.Label();
		this.label1.Name = "label1";
		this.label1.LabelProp = global::Mono.Unix.Catalog.GetString("Choose folder");
		this.notebook1.SetTabLabel(this.filechooserwidget1, this.label1);
		this.label1.ShowAll();
		// Container child notebook1.Gtk.Notebook+NotebookChild
		this.GtkScrolledWindow4 = new global::Gtk.ScrolledWindow();
		this.GtkScrolledWindow4.Name = "GtkScrolledWindow4";
		this.GtkScrolledWindow4.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child GtkScrolledWindow4.Gtk.Container+ContainerChild
		this.spectra_textview = new global::Gtk.TextView();
		this.spectra_textview.Buffer.Text = "#!/bin/bash\n# need to enable SAS first!\n. setsas.sh\n\nexport SAS_ODF={sas_odf_dir}" +
			"/\ncifbuild\nexport SAS_CCF={sas_odf_dir}/ccf.cif\nodfingest\nSUMFILE=( *SUM.SAS)\nSA" +
			"S_ODF=$SUMFILE\nexport SAS_ODF\nepproc\n\nPNEVFILE=( *EPN*ImagingEvts.ds)\ncp -f $PNE" +
			"VFILE pn_evt.fits\n\nds9 $PNEVFILE\n\n#------------------------------------- Edit he" +
			"re ---------\nTARGET=\"RXJ1856\"                  #---- target ID\nEBAND=\"(PI in [15" +
			"0:15000])\"      #---- Energy band\nSRCREGFILE=\"src.reg\"           #---- Source re" +
			"g file\nBKGREGFILE=\"bkg.reg\"           #---- Background reg file\nTHRESHOLD=0.4   " +
			"                 #---- Threshold for GTI filtering\n#----------------------------" +
			"-----------------------------\n\nshopt -s nullglob\n\n#------- Go to reduction dir w" +
			"here ccf.cif and SUMMARY file are located ----------\n#cd {workingdir}\n\n#------- " +
			"Set environment variables SAS_CCF and SAS_ODF (observation-specific) ----\nSAS_CC" +
			"F=ccf.cif ; export SAS_CCF\nSUMFILE=( *SUM.SAS)\nSAS_ODF=$SUMFILE ; export SAS_ODF" +
			"\n\n#------- Get ObsID and satellite revolution from the SUMMARY file ------------" +
			"----\nOBSID=`grep \'/ Observation Identifier\' < $SUMFILE | awk \'{print $1}\'`\nREV=`" +
			"grep \'/ Revolution Identifier\' < $SUMFILE | awk \'{print $1}\'`\n\n#------- Get sour" +
			"ce and background coordinates from reg files --------------------\nawk \'BEGIN{FS " +
			"= \"(\"};/circle/{print $2}\' $SRCREGFILE > toto\nSRCREGCOORD=`awk \'BEGIN{FS = \")\"};" +
			"{print $1}\' toto`\nawk \'BEGIN{FS = \"(\"};/circle/{print $2}\' $BKGREGFILE > toto\nBK" +
			"GREGCOORD=`awk \'BEGIN{FS = \")\"};{print $1}\' toto`\nrm -f toto\nSRCREG=\"((X,Y) in c" +
			"ircle($SRCREGCOORD))\"\nBKGREG=\"((X,Y) in circle($BKGREGCOORD))\"\n\n#------- Find pn" +
			" event list to work with and copy it to spec dir -----------------\n\n#cp -f $PNEV" +
			"FILE ../spectra\n\n#------- Change to spec directory -----------------------------" +
			"-------------------\n#cd ../spectra\n\n#------- Copy event file -------------------" +
			"--------------------------------------\n\n\n#------- Keep a record of the SAS versi" +
			"on of the analysis in the directory -------\nsasversion > \"sasvers.read\"\n\n#------" +
			"- Filter periods of high background ---------------------------------------\nevse" +
			"lect table=pn_evt.fits withrateset=yes rateset=pn_bkgrate.fits timecolumn=TIME \\" +
			"\n         maketimecolumn=yes timebinsize=100 makeratecolumn=yes \\\n         expre" +
			"ssion=\'#XMMEA_EP && (PI>10000&&PI<12000) && (PATTERN<=4)\'\n\n#------- Plot backgro" +
			"und light curve ---------------------------------------------\ndsplot table=pn_bk" +
			"grate.fits x=TIME y=RATE\n\n#------- Generate GTI --------------------------------" +
			"----------------------------\n#tabgtigen table=pn_bkgrate.fits gtiset=pn_bkggti.f" +
			"its expression=\'RATE<=$THRESHOLD\'\n\ntabgtigen table=pn_bkgrate.fits expression=\'R" +
			"ATE<=0.4\' gtiset=pn_bkggti.fits \n\n#------- Filter event file with GTI ----------" +
			"------------------------------------\nevselect table=pn_evt.fits withfilteredset=" +
			"yes filteredset=pn_flt_evt.fits \\\n         destruct=yes keepfilteroutput=yes \\\n\t" +
			" expression=\'#XMMEA_EP && gti(pn_bkggti.fits,TIME) && (PI>150)\'\n\n#------- Examin" +
			"e filtered file ---------------------------------------------------\nevselect tab" +
			"le=pn_flt_evt.fits withrateset=yes rateset=pn_bkgrate_flt.fits timecolumn=TIME \\" +
			"\n         timebinsize=100 makeratecolumn=yes maketimecolumn=yes \\\n         expre" +
			"ssion=\'(PI in [10000:12000]) && (PATTERN<=4) && #XMMEA_EP\'\ndsplot table=pn_bkgra" +
			"te_flt.fits:RATE withx=yes x=TIME withy=yes y=RATE\n\n#------- Create the source s" +
			"pectrum ----------------------------------------------\nevselect table=pn_flt_evt" +
			".fits withspectrumset=yes spectrumset=pn_spec.fits \\\n         energycolumn=PI sp" +
			"ectralbinsize=5 {withspecranges} \\\n\t specchannelmin=0 specchannelmax=20479 \\\n\t e" +
			"xpression=\"#XMMEA_EP && (FLAG==0) && (PATTERN<=4) && $SRCREG && $EBAND\"\n\n#------" +
			"- Create the background spectrum ------------------------------------------\nevse" +
			"lect table=pn_flt_evt.fits withspectrumset=yes spectrumset=pn_bkg_spec.fits \\\n  " +
			"       energycolumn=PI spectralbinsize=5 {withspecranges} \\\n\t specchannelmin=0 s" +
			"pecchannelmax=20479 \\\n\t expression=\"#XMMEA_EP && (FLAG==0) && (PATTERN<=4) && $B" +
			"KGREG && $EBAND\"\n\n#------- Compute areas of source/background spectra ----------" +
			"--------------------\nbackscale spectrumset=pn_spec.fits badpixlocation=pn_flt_ev" +
			"t.fits\nbackscale spectrumset=pn_bkg_spec.fits badpixlocation=pn_flt_evt.fits\n\n#-" +
			"------ Create response matrix and ancillary file -------------------------------" +
			"\nrmfgen spectrumset=pn_spec.fits rmfset=pn.rmf {rmfgenRemainningCombineScript}\na" +
			"rfgen spectrumset=pn_spec.fits arfset=pn.arf withrmfset=yes rmfset=pn.rmf {arfge" +
			"nNotCombineScript} \n       \n#------- Copy files --------------------------------" +
			"------------------------------\ncp -f pn_spec.fits {nametoreplace}_spec.fits\ncp -" +
			"f pn_bkg_spec.fits {nametoreplace}_bkg.fits\ncp -f pn.rmf {nametoreplace}.rmf\ncp " +
			"-f pn.arf {nametoreplace}.arf\n\nspecgroup spectrumset={nametoreplace}_spec.fits m" +
			"incounts=25 rmfset={nametoreplace}.rmf arfset={nametoreplace}.arf backgndset={na" +
			"metoreplace}_bkg.fits \n\n#mv SpecGrp.ds ${TARGET}_${OBSID}_pn_gr3.fits\n\n#specgrou" +
			"p spectrumset=RXJ0420_0141751201_pn_spec.fits mincounts=20 #rmfset=RXJ0420_01417" +
			"51201_pn.rmf \\\n#arfset=RXJ0420_0141751201_pn.arf #backgndset=RXJ0420_0141751201_" +
			"pn_bkg_spec.fits \n\nmv SpecGrp.ds {nametoreplace}.ds\n\nmarfrmf rmfil={nametoreplac" +
			"e}.rmf arfil={nametoreplace}.arf outfil={nametoreplace}.rsp\n\n#cd ../../../script" +
			"s\n\n\n{combine_cp_command}";
		this.spectra_textview.CanFocus = true;
		this.spectra_textview.Name = "spectra_textview";
		this.GtkScrolledWindow4.Add(this.spectra_textview);
		this.notebook1.Add(this.GtkScrolledWindow4);
		global::Gtk.Notebook.NotebookChild w4 = ((global::Gtk.Notebook.NotebookChild)(this.notebook1[this.GtkScrolledWindow4]));
		w4.Position = 1;
		// Notebook tab
		this.label4 = new global::Gtk.Label();
		this.label4.Name = "label4";
		this.label4.LabelProp = global::Mono.Unix.Catalog.GetString("spectra.sas");
		this.notebook1.SetTabLabel(this.GtkScrolledWindow4, this.label4);
		this.label4.ShowAll();
		// Container child notebook1.Gtk.Notebook+NotebookChild
		this.GtkScrolledWindow5 = new global::Gtk.ScrolledWindow();
		this.GtkScrolledWindow5.Name = "GtkScrolledWindow5";
		this.GtkScrolledWindow5.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child GtkScrolledWindow5.Gtk.Container+ContainerChild
		this.spmos1textview = new global::Gtk.TextView();
		this.spmos1textview.Buffer.Text = "#!/bin/bash\n# need to enable SAS first!\n. setsas.sh\n\nexport SAS_ODF={sas_odf_dir}" +
			"/\ncifbuild\nexport SAS_CCF={sas_odf_dir}/ccf.cif\nodfingest\nSUMFILE=( *SUM.SAS)\nSA" +
			"S_ODF=$SUMFILE\nexport SAS_ODF\nemproc\n\nPNEVFILE=( *EMOS1*ImagingEvts.ds)\ncp -f $P" +
			"NEVFILE mos1_evt.fits\nds9 $PNEVFILE\n\n#------------------------------------- Edit" +
			" here ---------\nTARGET=\"RXJ0420\"                  #---- target ID\nEBAND=\"(PI in " +
			"[150:12000])\"      #---- Energy band\nSRCREGFILE=\"mos1src.reg\"           #---- So" +
			"urce reg file\nBKGREGFILE=\"mos1bkg.reg\"           #---- Background reg file\nTHRES" +
			"HOLD=0.35                    #---- Threshold for GTI filtering\n#----------------" +
			"-----------------------------------------\n\nshopt -s nullglob\n\n#------- Go to red" +
			"uction dir where ccf.cif and SUMMARY file are located ----------\n#cd {workingdir" +
			"}\n\n#------- Set environment variables SAS_CCF and SAS_ODF (observation-specific)" +
			" ----\nSAS_CCF=ccf.cif ; export SAS_CCF\nSUMFILE=( *SUM.SAS)\nSAS_ODF=$SUMFILE ; ex" +
			"port SAS_ODF\n\n#------- Get ObsID and satellite revolution from the SUMMARY file " +
			"----------------\nOBSID=`grep \'/ Observation Identifier\' < $SUMFILE | awk \'{print" +
			" $1}\'`\nREV=`grep \'/ Revolution Identifier\' < $SUMFILE | awk \'{print $1}\'`\n\n#----" +
			"--- Get source and background coordinates from reg files --------------------\naw" +
			"k \'BEGIN{FS = \"(\"};/circle/{print $2}\' $SRCREGFILE > toto\nSRCREGCOORD=`awk \'BEGI" +
			"N{FS = \")\"};{print $1}\' toto`\nawk \'BEGIN{FS = \"(\"};/circle/{print $2}\' $BKGREGFI" +
			"LE > toto\nBKGREGCOORD=`awk \'BEGIN{FS = \")\"};{print $1}\' toto`\nrm -f toto\nSRCREG=" +
			"\"((X,Y) in circle($SRCREGCOORD))\"\nBKGREG=\"((X,Y) in circle($BKGREGCOORD))\"\n\n#---" +
			"---- Find pn event list to work with and copy it to spec dir -----------------\n#" +
			"cp -f $PNEVFILE ../spectra\n\n#------- Change to spec directory ------------------" +
			"------------------------------\n#cd ../spectra\n\n#------- Copy event file --------" +
			"-------------------------------------------------\n\n\n#------- Keep a record of th" +
			"e SAS version of the analysis in the directory -------\nsasversion > \"sasvers.rea" +
			"d\"\n\n#------- Filter periods of high background ---------------------------------" +
			"------\nevselect table=mos1_evt.fits withrateset=yes rateset=mos1_bkgrate.fits ti" +
			"mecolumn=TIME \\\n         maketimecolumn=yes timebinsize=100 makeratecolumn=yes \\" +
			"\n         expression=\'#XMMEA_EM && (PI>10000) && (PATTERN==0)\'\n\n#------- Plot ba" +
			"ckground light curve ---------------------------------------------\ndsplot table=" +
			"mos1_bkgrate.fits x=TIME y=RATE\n\n#------- Generate GTI -------------------------" +
			"-----------------------------------\n#tabgtigen table=pn_bkgrate.fits gtiset=pn_b" +
			"kggti.fits expression=\'RATE<=$THRESHOLD\'\n\ntabgtigen table=mos1_bkgrate.fits expr" +
			"ession=\'RATE<=0.35\' gtiset=mos1_bkggti.fits \n\n#------- Filter event file with GT" +
			"I ----------------------------------------------\nevselect table=mos1_evt.fits wi" +
			"thfilteredset=yes filteredset=mos1_flt_evt.fits \\\n         destruct=yes keepfilt" +
			"eroutput=yes \\\n\t expression=\'#XMMEA_EM && gti(mos1_bkggti.fits,TIME) && (PI>150)" +
			"\'\n\n#------- Examine filtered file ----------------------------------------------" +
			"-----\nevselect table=mos1_flt_evt.fits withrateset=yes rateset=mos1_bkgrate_flt." +
			"fits timecolumn=TIME \\\n         timebinsize=100 makeratecolumn=yes maketimecolum" +
			"n=yes \\\n         expression=\'(PI>10000) && (PATTERN==0) && #XMMEA_EM\'\ndsplot tab" +
			"le=mos1_bkgrate_flt.fits:RATE withx=yes x=TIME withy=yes y=RATE\n\n#------- Create" +
			" the source spectrum ----------------------------------------------\nevselect tab" +
			"le=mos1_flt_evt.fits withspectrumset=yes spectrumset=mos1_spec.fits \\\n         e" +
			"nergycolumn=PI spectralbinsize=5 {withspecranges} \\\n\t specchannelmin=0 specchann" +
			"elmax=11999 \\\n\t expression=\"#XMMEA_EM && (FLAG==0) && (PATTERN<=12) && $SRCREG &" +
			"& $EBAND\"\n\n#------- Create the background spectrum -----------------------------" +
			"-------------\nevselect table=mos1_flt_evt.fits withspectrumset=yes spectrumset=m" +
			"os1_bkg_spec.fits \\\n         energycolumn=PI spectralbinsize=5 {withspecranges} " +
			"\\\n\t specchannelmin=0 specchannelmax=11999 \\\n\t expression=\"#XMMEA_EM && (FLAG==0)" +
			" && (PATTERN<=12) && $BKGREG && $EBAND\"\n\n#------- Compute areas of source/backgr" +
			"ound spectra ------------------------------\nbackscale spectrumset=mos1_spec.fits" +
			" badpixlocation=mos1_flt_evt.fits\nbackscale spectrumset=mos1_bkg_spec.fits badpi" +
			"xlocation=mos1_flt_evt.fits\n\n#------- Create response matrix and ancillary file " +
			"-------------------------------\nrmfgen spectrumset=mos1_spec.fits rmfset=mos1.rm" +
			"f {rmfgenRemainningCombineScript}\narfgen spectrumset=mos1_spec.fits arfset=mos1." +
			"arf withrmfset=yes rmfset=mos1.rmf {arfgenNotCombineScript}\n#psfenergy=1.0 \\\n # " +
			"     extendedsource=no modelee=yes\n       \n#------- Copy files -----------------" +
			"---------------------------------------------\ncp -f mos1_spec.fits {nametoreplac" +
			"e}_spec.fits\ncp -f mos1_bkg_spec.fits {nametoreplace}_bkg.fits\ncp -f mos1.rmf {n" +
			"ametoreplace}.rmf\ncp -f mos1.arf {nametoreplace}.arf\n\n#specgroup spectrumset=pn_" +
			"spec.fits mincounts=25 oversample=3 rmfset=pn.rmf \\\n#arfset=pn.arf backgndset=pn" +
			"_bkg_spec.fits \n\n#mv SpecGrp.ds ${TARGET}_${OBSID}_pn_gr3.fits\n\nspecgroup spectr" +
			"umset={nametoreplace}_spec.fits mincounts=25 oversample=3 rmfset={nametoreplace}" +
			".rmf  \\\narfset={nametoreplace}.arf backgndset={nametoreplace}_bkg.fits \n\nmv Spec" +
			"Grp.ds {nametoreplace}.ds\n\nmarfrmf rmfil={nametoreplace}.rmf arfil={nametoreplac" +
			"e}.arf outfil={nametoreplace}.rsp\n\n #cd ../../../scripts\n{combine_cp_command}";
		this.spmos1textview.CanFocus = true;
		this.spmos1textview.Name = "spmos1textview";
		this.GtkScrolledWindow5.Add(this.spmos1textview);
		this.notebook1.Add(this.GtkScrolledWindow5);
		global::Gtk.Notebook.NotebookChild w6 = ((global::Gtk.Notebook.NotebookChild)(this.notebook1[this.GtkScrolledWindow5]));
		w6.Position = 2;
		// Notebook tab
		this.label5 = new global::Gtk.Label();
		this.label5.Name = "label5";
		this.label5.LabelProp = global::Mono.Unix.Catalog.GetString("spmos1");
		this.notebook1.SetTabLabel(this.GtkScrolledWindow5, this.label5);
		this.label5.ShowAll();
		// Container child notebook1.Gtk.Notebook+NotebookChild
		this.GtkScrolledWindow2 = new global::Gtk.ScrolledWindow();
		this.GtkScrolledWindow2.Name = "GtkScrolledWindow2";
		this.GtkScrolledWindow2.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child GtkScrolledWindow2.Gtk.Container+ContainerChild
		this.spmos2textview = new global::Gtk.TextView();
		this.spmos2textview.Buffer.Text = global::Mono.Unix.Catalog.GetString("9#!/bin/bash\n# need to enable SAS first!\n. setsas.sh\n\nexport SAS_ODF={sas_odf_dir" +
				"}/\ncifbuild\nexport SAS_CCF={sas_odf_dir}/ccf.cif\nodfingest\nSUMFILE=( *SUM.SAS)\nS" +
				"AS_ODF=$SUMFILE\nexport SAS_ODF\nemproc\n\nPNEVFILE=( *EMOS2*ImagingEvts.ds)\ncp -f $" +
				"PNEVFILE mos2_evt.fits\nds9 $PNEVFILE\n\n#------------------------------------- Edi" +
				"t here ---------\nTARGET=\"RXJ0420\"                  #---- target ID\nEBAND=\"(PI in" +
				" [150:12000])\"      #---- Energy band\nSRCREGFILE=\"mos2src.reg\"           #---- S" +
				"ource reg file\nBKGREGFILE=\"mos2bkg.reg\"           #---- Background reg file\nTHRE" +
				"SHOLD=0.35                    #---- Threshold for GTI filtering\n#---------------" +
				"------------------------------------------\n\nshopt -s nullglob\n\n#------- Go to re" +
				"duction dir where ccf.cif and SUMMARY file are located ----------\n#cd {workingdi" +
				"r}\n\n#------- Set environment variables SAS_CCF and SAS_ODF (observation-specific" +
				") ----\nSAS_CCF=ccf.cif ; export SAS_CCF\nSUMFILE=( *SUM.SAS)\nSAS_ODF=$SUMFILE ; e" +
				"xport SAS_ODF\n\n#------- Get ObsID and satellite revolution from the SUMMARY file" +
				" ----------------\nOBSID=`grep \'/ Observation Identifier\' < $SUMFILE | awk \'{prin" +
				"t $1}\'`\nREV=`grep \'/ Revolution Identifier\' < $SUMFILE | awk \'{print $1}\'`\n\n#---" +
				"---- Get source and background coordinates from reg files --------------------\na" +
				"wk \'BEGIN{FS = \"(\"};/circle/{print $2}\' $SRCREGFILE > toto\nSRCREGCOORD=`awk \'BEG" +
				"IN{FS = \")\"};{print $1}\' toto`\nawk \'BEGIN{FS = \"(\"};/circle/{print $2}\' $BKGREGF" +
				"ILE > toto\nBKGREGCOORD=`awk \'BEGIN{FS = \")\"};{print $1}\' toto`\nrm -f toto\nSRCREG" +
				"=\"((X,Y) in circle($SRCREGCOORD))\"\nBKGREG=\"((X,Y) in circle($BKGREGCOORD))\"\n\n#--" +
				"----- Find pn event list to work with and copy it to spec dir -----------------\n" +
				"\n#cp -f $PNEVFILE ../spectra\n\n#------- Change to spec directory ----------------" +
				"--------------------------------\n#cd ../spectra\n\n#------- Copy event file ------" +
				"---------------------------------------------------\n\n\n#------- Keep a record of " +
				"the SAS version of the analysis in the directory -------\nsasversion > \"sasvers.r" +
				"ead\"\n\n#------- Filter periods of high background -------------------------------" +
				"--------\nevselect table=mos2_evt.fits withrateset=yes rateset=mos2_bkgrate.fits " +
				"timecolumn=TIME \\\n         maketimecolumn=yes timebinsize=100 makeratecolumn=yes" +
				" \\\n         expression=\'#XMMEA_EM && (PI>10000) && (PATTERN==0)\'\n\n#------- Plot " +
				"background light curve ---------------------------------------------\ndsplot tabl" +
				"e=mos2_bkgrate.fits x=TIME y=RATE\n\n#------- Generate GTI -----------------------" +
				"-------------------------------------\n#tabgtigen table=pn_bkgrate.fits gtiset=pn" +
				"_bkggti.fits expression=\'RATE<=$THRESHOLD\'\n\ntabgtigen table=mos2_bkgrate.fits ex" +
				"pression=\'RATE<=0.35\' gtiset=mos2_bkggti.fits \n\n#------- Filter event file with " +
				"GTI ----------------------------------------------\nevselect table=mos2_evt.fits " +
				"withfilteredset=yes filteredset=mos2_flt_evt.fits \\\n         destruct=yes keepfi" +
				"lteroutput=yes \\\n\t expression=\'#XMMEA_EM && gti(mos2_bkggti.fits,TIME) && (PI>15" +
				"0)\'\n\n#------- Examine filtered file --------------------------------------------" +
				"-------\nevselect table=mos2_flt_evt.fits withrateset=yes rateset=mos2_bkgrate_fl" +
				"t.fits timecolumn=TIME \\\n         timebinsize=100 makeratecolumn=yes maketimecol" +
				"umn=yes \\\n         expression=\'(PI>10000) && (PATTERN==0) && #XMMEA_EM\'\ndsplot t" +
				"able=mos2_bkgrate_flt.fits:RATE withx=yes x=TIME withy=yes y=RATE\n\n#------- Crea" +
				"te the source spectrum ----------------------------------------------\nevselect t" +
				"able=mos2_flt_evt.fits withspectrumset=yes spectrumset=mos2_spec.fits \\\n        " +
				" energycolumn=PI spectralbinsize=5 {withspecranges} \\\n\t specchannelmin=0 speccha" +
				"nnelmax=11999 \\\n\t expression=\"#XMMEA_EM && (FLAG==0) && (PATTERN<=12) && $SRCREG" +
				" && $EBAND\"\n\n#------- Create the background spectrum ---------------------------" +
				"---------------\nevselect table=mos2_flt_evt.fits withspectrumset=yes spectrumset" +
				"=mos2_bkg_spec.fits \\\n         energycolumn=PI spectralbinsize=5 {withspecranges" +
				"} \\\n\t specchannelmin=0 specchannelmax=11999 \\\n\t expression=\"#XMMEA_EM && (FLAG==" +
				"0) && (PATTERN<=12) && $BKGREG && $EBAND\"\n\n#------- Compute areas of source/back" +
				"ground spectra ------------------------------\nbackscale spectrumset=mos2_spec.fi" +
				"ts badpixlocation=mos2_flt_evt.fits\nbackscale spectrumset=mos2_bkg_spec.fits bad" +
				"pixlocation=mos2_flt_evt.fits\n\n#------- Create response matrix and ancillary fil" +
				"e -------------------------------\nrmfgen spectrumset=mos2_spec.fits rmfset=mos2." +
				"rmf {rmfgenRemainningCombineScript}\narfgen spectrumset=mos2_spec.fits arfset=mos" +
				"2.arf withrmfset=yes rmfset=mos2.rmf {arfgenNotCombineScript} \n       \n#psfenerg" +
				"y=1.0 \\\n #      extendedsource=no modelee=yes\n       \n#------- Copy files ------" +
				"--------------------------------------------------------\ncp -f mos2_spec.fits {n" +
				"ametoreplace}_spec.fits\ncp -f mos2_bkg_spec.fits {nametoreplace}_bkg.fits\ncp -f " +
				"mos2.rmf {nametoreplace}.rmf\ncp -f mos2.arf {nametoreplace}.arf\n\nspecgroup spect" +
				"rumset={nametoreplace}_spec.fits mincounts=25 oversample=3 rmfset={nametoreplace" +
				"}.rmf \\\narfset={nametoreplace}.arf backgndset={nametoreplace}_bkg.fits \n\n#mv Spe" +
				"cGrp.ds ${TARGET}_${OBSID}_pn_gr3.fits\n\n#specgroup spectrumset=RXJ0420_065147020" +
				"1_mos2_spec.fits mincounts=20 rmfset=RXJ0420_0651470201_mos2.rmf \\\n#arfset=RXJ04" +
				"20_0651470201_mos2.arf backgndset=RXJ0420_0651470201_mos2_bkg_spec.fits \n\nmv Spe" +
				"cGrp.ds {nametoreplace}.ds\n       \nmarfrmf rmfil={nametoreplace}.rmf arfil={name" +
				"toreplace}.arf outfil={nametoreplace}.rsp\n\n#cd ../../../scripts\n{combine_cp_comm" +
				"and}\n");
		this.spmos2textview.CanFocus = true;
		this.spmos2textview.Name = "spmos2textview";
		this.GtkScrolledWindow2.Add(this.spmos2textview);
		this.notebook1.Add(this.GtkScrolledWindow2);
		global::Gtk.Notebook.NotebookChild w8 = ((global::Gtk.Notebook.NotebookChild)(this.notebook1[this.GtkScrolledWindow2]));
		w8.Position = 3;
		// Notebook tab
		this.label6 = new global::Gtk.Label();
		this.label6.Name = "label6";
		this.label6.LabelProp = global::Mono.Unix.Catalog.GetString("spmos2");
		this.notebook1.SetTabLabel(this.GtkScrolledWindow2, this.label6);
		this.label6.ShowAll();
		// Container child notebook1.Gtk.Notebook+NotebookChild
		this.GtkScrolledWindow3 = new global::Gtk.ScrolledWindow();
		this.GtkScrolledWindow3.Name = "GtkScrolledWindow3";
		this.GtkScrolledWindow3.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child GtkScrolledWindow3.Gtk.Container+ContainerChild
		this.combined_script_textview = new global::Gtk.TextView();
		this.combined_script_textview.CanFocus = true;
		this.combined_script_textview.Name = "combined_script_textview";
		this.GtkScrolledWindow3.Add(this.combined_script_textview);
		this.notebook1.Add(this.GtkScrolledWindow3);
		global::Gtk.Notebook.NotebookChild w10 = ((global::Gtk.Notebook.NotebookChild)(this.notebook1[this.GtkScrolledWindow3]));
		w10.Position = 4;
		// Notebook tab
		this.label2 = new global::Gtk.Label();
		this.label2.Name = "label2";
		this.label2.LabelProp = global::Mono.Unix.Catalog.GetString("Generated scripts");
		this.notebook1.SetTabLabel(this.GtkScrolledWindow3, this.label2);
		this.label2.ShowAll();
		this.vbox1.Add(this.notebook1);
		global::Gtk.Box.BoxChild w11 = ((global::Gtk.Box.BoxChild)(this.vbox1[this.notebook1]));
		w11.Position = 0;
		// Container child vbox1.Gtk.Box+BoxChild
		this.hbox1 = new global::Gtk.HBox();
		this.hbox1.Name = "hbox1";
		this.hbox1.Spacing = 6;
		// Container child hbox1.Gtk.Box+BoxChild
		this.epic_check = new global::Gtk.CheckButton();
		this.epic_check.CanFocus = true;
		this.epic_check.Name = "epic_check";
		this.epic_check.Label = global::Mono.Unix.Catalog.GetString("Epic name");
		this.epic_check.Active = true;
		this.epic_check.DrawIndicator = true;
		this.epic_check.UseUnderline = true;
		this.hbox1.Add(this.epic_check);
		global::Gtk.Box.BoxChild w12 = ((global::Gtk.Box.BoxChild)(this.hbox1[this.epic_check]));
		w12.Position = 0;
		// Container child hbox1.Gtk.Box+BoxChild
		this.epic_name = new global::Gtk.Entry();
		this.epic_name.CanFocus = true;
		this.epic_name.Name = "epic_name";
		this.epic_name.Text = global::Mono.Unix.Catalog.GetString("pn");
		this.epic_name.IsEditable = true;
		this.epic_name.InvisibleChar = '•';
		this.hbox1.Add(this.epic_name);
		global::Gtk.Box.BoxChild w13 = ((global::Gtk.Box.BoxChild)(this.hbox1[this.epic_name]));
		w13.Position = 1;
		// Container child hbox1.Gtk.Box+BoxChild
		this.mos1check = new global::Gtk.CheckButton();
		this.mos1check.CanFocus = true;
		this.mos1check.Name = "mos1check";
		this.mos1check.Label = global::Mono.Unix.Catalog.GetString("Mos1 Name");
		this.mos1check.Active = true;
		this.mos1check.DrawIndicator = true;
		this.mos1check.UseUnderline = true;
		this.hbox1.Add(this.mos1check);
		global::Gtk.Box.BoxChild w14 = ((global::Gtk.Box.BoxChild)(this.hbox1[this.mos1check]));
		w14.Position = 2;
		// Container child hbox1.Gtk.Box+BoxChild
		this.mos1_name = new global::Gtk.Entry();
		this.mos1_name.CanFocus = true;
		this.mos1_name.Name = "mos1_name";
		this.mos1_name.Text = global::Mono.Unix.Catalog.GetString("mos1_");
		this.mos1_name.IsEditable = true;
		this.mos1_name.InvisibleChar = '•';
		this.hbox1.Add(this.mos1_name);
		global::Gtk.Box.BoxChild w15 = ((global::Gtk.Box.BoxChild)(this.hbox1[this.mos1_name]));
		w15.Position = 3;
		// Container child hbox1.Gtk.Box+BoxChild
		this.mos2check = new global::Gtk.CheckButton();
		this.mos2check.CanFocus = true;
		this.mos2check.Name = "mos2check";
		this.mos2check.Label = global::Mono.Unix.Catalog.GetString("Mos2 name");
		this.mos2check.Active = true;
		this.mos2check.DrawIndicator = true;
		this.mos2check.UseUnderline = true;
		this.hbox1.Add(this.mos2check);
		global::Gtk.Box.BoxChild w16 = ((global::Gtk.Box.BoxChild)(this.hbox1[this.mos2check]));
		w16.Position = 4;
		// Container child hbox1.Gtk.Box+BoxChild
		this.mos2_name = new global::Gtk.Entry();
		this.mos2_name.CanFocus = true;
		this.mos2_name.Name = "mos2_name";
		this.mos2_name.Text = global::Mono.Unix.Catalog.GetString("mos2_");
		this.mos2_name.IsEditable = true;
		this.mos2_name.InvisibleChar = '•';
		this.hbox1.Add(this.mos2_name);
		global::Gtk.Box.BoxChild w17 = ((global::Gtk.Box.BoxChild)(this.hbox1[this.mos2_name]));
		w17.Position = 5;
		this.vbox1.Add(this.hbox1);
		global::Gtk.Box.BoxChild w18 = ((global::Gtk.Box.BoxChild)(this.vbox1[this.hbox1]));
		w18.Position = 1;
		w18.Expand = false;
		w18.Fill = false;
		// Container child vbox1.Gtk.Box+BoxChild
		this.hbox2 = new global::Gtk.HBox();
		this.hbox2.Name = "hbox2";
		this.hbox2.Spacing = 6;
		// Container child hbox2.Gtk.Box+BoxChild
		this.combine_spectracheck = new global::Gtk.CheckButton();
		this.combine_spectracheck.CanFocus = true;
		this.combine_spectracheck.Name = "combine_spectracheck";
		this.combine_spectracheck.Label = global::Mono.Unix.Catalog.GetString("Combine Spectra");
		this.combine_spectracheck.Active = true;
		this.combine_spectracheck.DrawIndicator = true;
		this.combine_spectracheck.UseUnderline = true;
		this.hbox2.Add(this.combine_spectracheck);
		global::Gtk.Box.BoxChild w19 = ((global::Gtk.Box.BoxChild)(this.hbox2[this.combine_spectracheck]));
		w19.Position = 0;
		// Container child hbox2.Gtk.Box+BoxChild
		this.combined_spectra_name = new global::Gtk.Entry();
		this.combined_spectra_name.CanFocus = true;
		this.combined_spectra_name.Name = "combined_spectra_name";
		this.combined_spectra_name.Text = global::Mono.Unix.Catalog.GetString("pn");
		this.combined_spectra_name.IsEditable = true;
		this.combined_spectra_name.InvisibleChar = '•';
		this.hbox2.Add(this.combined_spectra_name);
		global::Gtk.Box.BoxChild w20 = ((global::Gtk.Box.BoxChild)(this.hbox2[this.combined_spectra_name]));
		w20.Position = 1;
		// Container child hbox2.Gtk.Box+BoxChild
		this.deleteExtFiles = new global::Gtk.CheckButton();
		this.deleteExtFiles.CanFocus = true;
		this.deleteExtFiles.Name = "deleteExtFiles";
		this.deleteExtFiles.Label = global::Mono.Unix.Catalog.GetString("Delete extracted files afterwards");
		this.deleteExtFiles.Active = true;
		this.deleteExtFiles.DrawIndicator = true;
		this.deleteExtFiles.UseUnderline = true;
		this.hbox2.Add(this.deleteExtFiles);
		global::Gtk.Box.BoxChild w21 = ((global::Gtk.Box.BoxChild)(this.hbox2[this.deleteExtFiles]));
		w21.Position = 2;
		this.vbox1.Add(this.hbox2);
		global::Gtk.Box.BoxChild w22 = ((global::Gtk.Box.BoxChild)(this.vbox1[this.hbox2]));
		w22.Position = 2;
		w22.Expand = false;
		w22.Fill = false;
		// Container child vbox1.Gtk.Box+BoxChild
		this.hbox3 = new global::Gtk.HBox();
		this.hbox3.Name = "hbox3";
		this.hbox3.Spacing = 6;
		// Container child hbox3.Gtk.Box+BoxChild
		this.label3 = new global::Gtk.Label();
		this.label3.Name = "label3";
		this.label3.LabelProp = global::Mono.Unix.Catalog.GetString("rmfgen  EnergyMin");
		this.hbox3.Add(this.label3);
		global::Gtk.Box.BoxChild w23 = ((global::Gtk.Box.BoxChild)(this.hbox3[this.label3]));
		w23.Position = 0;
		w23.Expand = false;
		w23.Fill = false;
		// Container child hbox3.Gtk.Box+BoxChild
		this.rmfgenEnergyMin = new global::Gtk.Entry();
		this.rmfgenEnergyMin.CanFocus = true;
		this.rmfgenEnergyMin.Name = "rmfgenEnergyMin";
		this.rmfgenEnergyMin.Text = global::Mono.Unix.Catalog.GetString("0.1");
		this.rmfgenEnergyMin.IsEditable = true;
		this.rmfgenEnergyMin.InvisibleChar = '•';
		this.hbox3.Add(this.rmfgenEnergyMin);
		global::Gtk.Box.BoxChild w24 = ((global::Gtk.Box.BoxChild)(this.hbox3[this.rmfgenEnergyMin]));
		w24.Position = 1;
		// Container child hbox3.Gtk.Box+BoxChild
		this.label9 = new global::Gtk.Label();
		this.label9.Name = "label9";
		this.label9.LabelProp = global::Mono.Unix.Catalog.GetString("rmfgen EnergyMax");
		this.hbox3.Add(this.label9);
		global::Gtk.Box.BoxChild w25 = ((global::Gtk.Box.BoxChild)(this.hbox3[this.label9]));
		w25.Position = 2;
		w25.Expand = false;
		w25.Fill = false;
		// Container child hbox3.Gtk.Box+BoxChild
		this.rmfgenEnergyMax = new global::Gtk.Entry();
		this.rmfgenEnergyMax.CanFocus = true;
		this.rmfgenEnergyMax.Name = "rmfgenEnergyMax";
		this.rmfgenEnergyMax.Text = global::Mono.Unix.Catalog.GetString("12.0");
		this.rmfgenEnergyMax.IsEditable = true;
		this.rmfgenEnergyMax.InvisibleChar = '•';
		this.hbox3.Add(this.rmfgenEnergyMax);
		global::Gtk.Box.BoxChild w26 = ((global::Gtk.Box.BoxChild)(this.hbox3[this.rmfgenEnergyMax]));
		w26.Position = 3;
		// Container child hbox3.Gtk.Box+BoxChild
		this.label8 = new global::Gtk.Label();
		this.label8.Name = "label8";
		this.label8.LabelProp = global::Mono.Unix.Catalog.GetString("rmfgen nenergybins");
		this.hbox3.Add(this.label8);
		global::Gtk.Box.BoxChild w27 = ((global::Gtk.Box.BoxChild)(this.hbox3[this.label8]));
		w27.Position = 4;
		w27.Expand = false;
		w27.Fill = false;
		// Container child hbox3.Gtk.Box+BoxChild
		this.rmfgennenergybins = new global::Gtk.Entry();
		this.rmfgennenergybins.CanFocus = true;
		this.rmfgennenergybins.Name = "rmfgennenergybins";
		this.rmfgennenergybins.Text = global::Mono.Unix.Catalog.GetString("2400");
		this.rmfgennenergybins.IsEditable = true;
		this.rmfgennenergybins.InvisibleChar = '•';
		this.hbox3.Add(this.rmfgennenergybins);
		global::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.hbox3[this.rmfgennenergybins]));
		w28.Position = 5;
		this.vbox1.Add(this.hbox3);
		global::Gtk.Box.BoxChild w29 = ((global::Gtk.Box.BoxChild)(this.vbox1[this.hbox3]));
		w29.Position = 3;
		w29.Expand = false;
		w29.Fill = false;
		// Container child vbox1.Gtk.Box+BoxChild
		this.button2 = new global::Gtk.Button();
		this.button2.CanFocus = true;
		this.button2.Name = "button2";
		this.button2.UseUnderline = true;
		this.button2.Label = global::Mono.Unix.Catalog.GetString("Generate");
		this.vbox1.Add(this.button2);
		global::Gtk.Box.BoxChild w30 = ((global::Gtk.Box.BoxChild)(this.vbox1[this.button2]));
		w30.PackType = ((global::Gtk.PackType)(1));
		w30.Position = 4;
		w30.Expand = false;
		w30.Fill = false;
		this.Add(this.vbox1);
		if ((this.Child != null))
		{
			this.Child.ShowAll();
		}
		this.GtkScrolledWindow3.Hide();
		this.Show();
		this.DeleteEvent += new global::Gtk.DeleteEventHandler(this.OnDeleteEvent);
		this.button2.Clicked += new global::System.EventHandler(this.OnButton2Clicked);
	}
}
